version: '3.8'
services:
  # haproxy:
  #   build: HAProxy
  #   ports:
  #     - '80:80'
  #   depends_on:
  #     - tradeservice
  #     - tradeservice2
  #   networks:
  #     backend

  tradeservice:
    build:
      context: ./TradeService
      dockerfile: Dockerfile
    container_name: tradeservice
    ports:
      - '5000:5000'
    depends_on:
      - rabbit_mq
      - mongo
    environment:
      AMQP_URL: ${pikaURL}
      MONGO_URL: ${MONGO_URL}
      TRADE_QUEUE_NAME: ${TRADESERVICE_QUEUE_NAME}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./tradeservice:/app
    networks:
      - backend

  # tradeservice2:
  #   build:
  #     context: ./TradeService
  #     dockerfile: Dockerfile
  #   container_name: tradeservice2
  #   ports:
  #     - '5000:5000'
  #   depends_on:
  #     - rabbit_mq
  #     - mongo
  #   environment:
  #     AMQP_URL: ${pikaURL}
  #     MONGO_URL: ${MONGO_URL}
  #     TRADE_QUEUE_NAME: ${TRADESERVICE_QUEUE_NAME}
  #     # RABBITMQ_HOST: rabbit_mq
  #     # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
  #   volumes:
  #     - ./tradeservice2:/app
  #   networks:
  #     - backend

  java_orchestrator_node:
    build:
      context: ./Java_Orchestrator_Node
      dockerfile: Dockerfile
    container_name: java_orchestrator_node
    depends_on:
      - rabbit_mq
      - mongo
      - tradeservice
    environment:
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      RABBITMQ_URI: ${RABBITMQ_URI}
      SERVICE_QUEUE_NAME: ${TRADESERVICE_QUEUE_NAME}
      PORTFOLIO_QUEUE_NAME: ${PORTFOLIO_QUEUE_NAME}
      STOCK_QUEUE_NAME: ${STOCK_QUEUE_NAME}
      ROUTING_KEY_START: ${ROUTING_KEY_START}
      EXCHANGE_NAME: ${EXCHANGE_NAME}
      RECEIVE_QUEUE_NAME: ${RECEIVE_QUEUE_NAME}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./java_orchestrator_node:/app/target
    networks:
      - backend

  java_orchestrator_node2:
    build:
      context: ./Java_Orchestrator_Node
      dockerfile: Dockerfile
    container_name: java_orchestrator_node2
    depends_on:
      - rabbit_mq
      - mongo
      - tradeservice
    environment:
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      RABBITMQ_URI: ${RABBITMQ_URI}
      SERVICE_QUEUE_NAME: ${TRADESERVICE_QUEUE_NAME}
      PORTFOLIO_QUEUE_NAME: ${PORTFOLIO_QUEUE_NAME}
      STOCK_QUEUE_NAME: ${STOCK_QUEUE_NAME}
      ROUTING_KEY_START: ${ROUTING_KEY_START}
      EXCHANGE_NAME: ${EXCHANGE_NAME}
      RECEIVE_QUEUE_NAME: ${RECEIVE_QUEUE_NAME}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./java_orchestrator_node2:/app/target
    networks:
      - backend

  java_clientacc_node:
    build:
      context: ./Java_mongo_Node
      dockerfile: Dockerfile
    container_name: java_clientacc_node
    depends_on:
      - rabbit_mq
      - mongo
      - tradeservice
    environment:
      RABBIT_URI: ${RABBITMQ_URI}
      MONGO_URI: ${MONGO_URL}
      RABBIT_QUEUE_NAME: ${PORTFOLIO_QUEUE_NAME}
      RECEIVE_QUEUE_NAME: ${RECEIVE_QUEUE_NAME}
      NODE_TYPE: 'CLIENT_COLLECTION'
      COLLECTION_TYPE: 'CLIENT_COLLECTION'
      EXCHANGE_NAME: ${EXCHANGE_NAME}
      ROUTING_KEY_START: ${ROUTING_KEY_START}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./java_clientacc_node:/app/target
    networks:
      - backend

  java_clientacc_node2:
    build:
      context: ./Java_mongo_Node
      dockerfile: Dockerfile
    container_name: java_clientacc_node2
    depends_on:
      - rabbit_mq
      - mongo
      - tradeservice
    environment:
      RABBIT_URI: ${RABBITMQ_URI}
      MONGO_URI: ${MONGO_URL}
      RABBIT_QUEUE_NAME: ${PORTFOLIO_QUEUE_NAME}
      RECEIVE_QUEUE_NAME: ${RECEIVE_QUEUE_NAME}
      NODE_TYPE: 'CLIENT_COLLECTION'
      COLLECTION_TYPE: 'CLIENT_COLLECTION'
      EXCHANGE_NAME: ${EXCHANGE_NAME}
      ROUTING_KEY_START: ${ROUTING_KEY_START}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./java_clientacc_node2:/app/target
    networks:
      - backend

  java_broker_node:
    build:
      context: ./Java_mongo_Node
      dockerfile: Dockerfile
    container_name: java_broker_node
    depends_on:
      - rabbit_mq
      - mongo
      - tradeservice
    environment:
      RABBIT_URI: ${RABBITMQ_URI}
      MONGO_URI: ${MONGO_URL}
      RABBIT_QUEUE_NAME: ${STOCK_QUEUE_NAME}
      RECEIVE_QUEUE_NAME: ${RECEIVE_QUEUE_NAME}
      NODE_TYPE: 'BROKERAGE_COLLECTION'
      COLLECTION_TYPE: 'BROKERAGE_COLLECTION'
      EXCHANGE_NAME: ${EXCHANGE_NAME}
      ROUTING_KEY_START: ${ROUTING_KEY_START}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./target:/app/target
    networks:
      - backend

  java_broker_node2:
    build:
      context: ./Java_mongo_Node
      dockerfile: Dockerfile
    container_name: java_broker_node2
    depends_on:
      - rabbit_mq
      - mongo
      - tradeservice
    environment:
      RABBIT_URI: ${RABBITMQ_URI}
      MONGO_URI: ${MONGO_URL}
      RABBIT_QUEUE_NAME: ${STOCK_QUEUE_NAME}
      RECEIVE_QUEUE_NAME: ${RECEIVE_QUEUE_NAME}
      NODE_TYPE: 'BROKERAGE_COLLECTION'
      COLLECTION_TYPE: 'BROKERAGE_COLLECTION'
      EXCHANGE_NAME: ${EXCHANGE_NAME}
      ROUTING_KEY_START: ${ROUTING_KEY_START}
      # RABBITMQ_HOST: rabbit_mq
      # RABBITMQ_USERPASS: ${RABBITMQ_USERPASS}
    volumes:
      - ./target2:/app/target
    networks:
      - backend

  mongo:
    build:
      context: ./Mongo
      dockerfile: mongo.Dockerfile
    container_name: Mongo
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: isigutt
      MONGO_INITDB_ROOT_PASSWORD: isi
    volumes:
      - mongo-data:/data/db
      - ./Mongo/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - backend

networks:
  backend:
    driver: bridge
